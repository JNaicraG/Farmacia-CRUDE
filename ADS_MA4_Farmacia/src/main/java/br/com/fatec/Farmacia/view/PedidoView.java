/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.fatec.Farmacia.view;

import br.com.fatec.Farmacia.DAO.ClienteDAO;
import br.com.fatec.Farmacia.DAO.PedidoDAO;
import br.com.fatec.Farmacia.DAO.RemedioDAO;
import br.com.fatec.Farmacia.Exceptions.DadosBrancoException;
import br.com.fatec.Farmacia.bean.Cliente;
import br.com.fatec.Farmacia.bean.Pedido;
import br.com.fatec.Farmacia.bean.Remedio;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author nicol
 */
public class PedidoView extends javax.swing.JFrame {

    private DefaultComboBoxModel<Cliente> modelC;
    private ClienteDAO cliDAO = new ClienteDAO();

    private DefaultComboBoxModel<Remedio> modelR;
    private RemedioDAO remDAO = new RemedioDAO();

    private PedidoDAO dao = new PedidoDAO();
    private Pedido pedidoBean = new Pedido();

    /**
     * Creates new form PedidoView
     */
    public PedidoView() {
        initComponents();
        //manda preencher a combo
        preencherComboCliente();
        preencherComboRemedio();

        //limpar a seleção da combo
        cbCliente.setSelectedIndex(-1);
        cbRemedio.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPesquisar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblIDc = new javax.swing.JLabel();
        txtIDc = new javax.swing.JTextField();
        lblCliente = new javax.swing.JLabel();
        btnInserir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnCancelar = new javax.swing.JButton();
        cbCliente = new javax.swing.JComboBox<>();
        lblIDr = new javax.swing.JLabel();
        txtIDr = new javax.swing.JTextField();
        lblRemedio = new javax.swing.JLabel();
        cbRemedio = new javax.swing.JComboBox<>();
        txtPreco = new javax.swing.JTextField();
        txtQuantidade = new javax.swing.JTextField();
        lblQuantidade = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        lblPreco = new javax.swing.JLabel();
        txtIDp = new javax.swing.JTextField();
        lblIDp = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Cadastro de Pedidos");

        lblIDc.setBackground(new java.awt.Color(255, 0, 255));
        lblIDc.setText("IDc");

        txtIDc.setEditable(false);
        txtIDc.setBackground(new java.awt.Color(153, 153, 153));
        txtIDc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIDc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIDcFocusLost(evt);
            }
        });

        lblCliente.setText("Cliente");

        btnInserir.setText("Inserir");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        cbCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbClienteItemStateChanged(evt);
            }
        });

        lblIDr.setBackground(new java.awt.Color(255, 0, 255));
        lblIDr.setText("IDr");

        txtIDr.setEditable(false);
        txtIDr.setBackground(new java.awt.Color(153, 153, 153));
        txtIDr.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIDr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIDrFocusLost(evt);
            }
        });

        lblRemedio.setText("Remédio");

        cbRemedio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbRemedioItemStateChanged(evt);
            }
        });

        txtPreco.setEditable(false);
        txtPreco.setBackground(new java.awt.Color(153, 153, 153));
        txtPreco.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantidadeFocusLost(evt);
            }
        });

        lblQuantidade.setBackground(new java.awt.Color(255, 0, 255));
        lblQuantidade.setText("Quantidade");

        lblTotal.setBackground(new java.awt.Color(255, 0, 255));
        lblTotal.setText("Total");

        txtTotal.setEditable(false);
        txtTotal.setBackground(new java.awt.Color(153, 153, 153));
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblPreco.setBackground(new java.awt.Color(255, 0, 255));
        lblPreco.setText("Preço");

        txtIDp.setBackground(new java.awt.Color(153, 153, 153));
        txtIDp.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblIDp.setBackground(new java.awt.Color(255, 0, 255));
        lblIDp.setText("IDp");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIDc)
                                .addGap(18, 18, 18)
                                .addComponent(txtIDc, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblCliente)
                                .addGap(18, 18, 18)
                                .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIDr)
                                .addGap(18, 18, 18)
                                .addComponent(txtIDr, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblRemedio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbRemedio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPesquisar)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIDp)
                                .addGap(18, 18, 18)
                                .addComponent(txtIDp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(lblPreco)
                .addGap(18, 18, 18)
                .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblQuantidade)
                .addGap(18, 18, 18)
                .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTotal)
                .addGap(18, 18, 18)
                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInserir)
                .addGap(18, 18, 18)
                .addComponent(btnAlterar)
                .addGap(18, 18, 18)
                .addComponent(btnExcluir)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addGap(141, 141, 141))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIDc)
                        .addComponent(txtIDc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCliente)
                        .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnPesquisar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIDp)
                        .addComponent(txtIDp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIDr)
                        .addComponent(txtIDr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRemedio)
                        .addComponent(cbRemedio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantidade)
                    .addComponent(lblTotal)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPreco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInserir)
                    .addComponent(btnAlterar)
                    .addComponent(btnExcluir)
                    .addComponent(btnCancelar))
                .addGap(28, 28, 28))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbClienteItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Cliente p = (Cliente) cbCliente.getSelectedItem();

            txtIDc.setText(Integer.toString(p.getIdCliente()));
        }
    }//GEN-LAST:event_cbClienteItemStateChanged

    private void cbRemedioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbRemedioItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Remedio p = (Remedio) cbRemedio.getSelectedItem();

            txtIDr.setText(Integer.toString(p.getIdRemedio()));

            try {
                p = remDAO.buscaID(p);
            } catch (SQLException ex) {
                erro(ex.getMessage());
            }
            txtPreco.setText(String.valueOf(p.getPreco()));
        }
    }//GEN-LAST:event_cbRemedioItemStateChanged

    private void txtIDcFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIDcFocusLost
        preencheRestoCliente();
    }//GEN-LAST:event_txtIDcFocusLost

    private void txtIDrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIDrFocusLost
        preencheRestoCliente();
    }//GEN-LAST:event_txtIDrFocusLost

    private void txtQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantidadeFocusLost
        // TODO add your handling code here:
        float total = Integer.parseInt(txtQuantidade.getText()) * Float.parseFloat(txtPreco.getText());
        txtTotal.setText(String.valueOf(total));
    }//GEN-LAST:event_txtQuantidadeFocusLost

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed


    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        try {
            //id com auto increment, mas ainda é passado ao cliente
            //se preenchido dados sem codCliente
            /*clienteBean.setTelefone("TESTANDO MACAXEIRA");
            mensagem("Olha: "+ clienteBean.getTelefone());
            return;
             */
            moveTelaParaBean();
            if (dao.insere(pedidoBean)) {
                mensagem("Dados Incluidos com Sucesso");
                limpaCampos();
                txtIDp.requestFocus();
            } else {
                erro("Inclusão não foi bem sucedida");
            }
        } catch (DadosBrancoException ex) {
            erro(ex.getMessage());
            //return;
        } catch (SQLException ex) {
            erro(ex.getMessage());
        }
    }//GEN-LAST:event_btnInserirActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            moveTelaParaBean();
            if (dao.altera(pedidoBean)) {
                mensagem("Dados alterados com sucesso!");
                limpaCampos();
                txtIDp.requestFocus();
            } else {
                erro("Alteração não foi bem sucedida");
            }
        } catch (SQLException ex) {
            erro(ex.getMessage());
        } catch (DadosBrancoException ex) {
            erro(ex.getMessage());
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            moveTelaParaBeanPesquisar();
            int resp = JOptionPane.showConfirmDialog(rootPane,
                    "Tem certeza que deseja excluir os dados?",
                    "Confirmar Exclusão",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (resp == JOptionPane.NO_OPTION) {
                return;
            }
            if (dao.remove(pedidoBean)) {
                mensagem("Dados excluídos com sucesso!");
                limpaCampos();
                txtIDp.requestFocus();
            } else {
                erro("Dados não foram excluídos com sucesso");
            }
        } catch (SQLException ex) {
            erro(ex.getMessage());
        } catch (DadosBrancoException ex) {
            erro(ex.getMessage());
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        // TODO add your handling code here:
        try {
            moveTelaParaBeanPesquisar();
            pedidoBean = dao.buscaID(pedidoBean);
            if (pedidoBean == null) {
                erro("Dados não encontrados!");
            } else {
                moveBeanParaTela();
                preencheRestoCliente();
                preencheRestoRemedio();
            }
        } catch (SQLException ex) {
            erro(ex.getMessage());
        } catch (DadosBrancoException ex) {
            erro(ex.getMessage());
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    //auxiliar
    private void preencheRestoRemedio() {
        // TODO add your handling code here:
        //limpa a exibição da combo logo de cara
        cbRemedio.setSelectedIndex(-1);

        //se não existir nada digitado no text, limpar a combo e ir embora
        if (txtIDr.getText().length() == 0) { //campo vazio
            return;
        }

        Remedio p = new Remedio();
        p.setIdRemedio(Integer.parseInt(txtIDr.getText()));

        //fazer a pesquisa na combo
        cbRemedio.setSelectedItem(p);

        //se não encontrou apagar o codigo digitado
        if (cbRemedio.getSelectedIndex() == -1) {
            txtIDr.setText("");
        }
    }

    private void preencheRestoCliente() {
        // TODO add your handling code here:
        //limpa a exibição da combo logo de cara
        cbCliente.setSelectedIndex(-1);

        //se não existir nada digitado no text, limpar a combo e ir embora
        if (txtIDc.getText().length() == 0) { //campo vazio
            return;
        }

        Cliente p = new Cliente();
        p.setIdCliente(Integer.parseInt(txtIDc.getText()));

        //fazer a pesquisa na combo
        cbCliente.setSelectedItem(p);

        //se não encontrou apagar o codigo digitado
        if (cbCliente.getSelectedIndex() == -1) {
            txtIDc.setText("");
        }
    }

    private void moveTelaParaBeanPesquisar() throws DadosBrancoException {

        if (!txtIDp.getText().isEmpty()) {
            pedidoBean.setIdPedido(Integer.parseInt(txtIDp.getText()));
            //setar aleatorio para cliente
            Cliente p = new Cliente();
            p.setIdCliente(1);
            pedidoBean.setCliente(p);

            //setar aleatorio para remedio
            Remedio r = new Remedio();
            r.setIdRemedio(1);
            pedidoBean.setRemedio(r);
            //resto
            if (txtQuantidade.getText().isEmpty()) {
                pedidoBean.setQuantidade(0);
            } else {
                pedidoBean.setQuantidade(Integer.parseInt(txtQuantidade.getText()));
            }
            if (txtPreco.getText().isEmpty()) {
                pedidoBean.setPreco(0);
            } else {
                pedidoBean.setPreco(Float.parseFloat(txtTotal.getText()));
            }
        } else {
            throw new DadosBrancoException("Preencha todos os Dados!");
        }
    }

    private void moveTelaParaBean() throws DadosBrancoException {
        if (verificaDados()) {
            if (txtIDp.getText().isEmpty()) {
                pedidoBean.setIdPedido(0); //não ficar em branco
            } else {
                pedidoBean.setIdPedido(Integer.parseInt(txtIDp.getText()));
            }
            pedidoBean.setCliente((Cliente) cbCliente.getSelectedItem());
            if(pedidoBean.getCliente() == null){
                 Cliente k = new Cliente();
                k.setIdCliente(1);
                pedidoBean.setCliente(k);
            }
                
            pedidoBean.setRemedio((Remedio) cbRemedio.getSelectedItem());
            if(pedidoBean.getRemedio()== null){
                 Remedio k = new Remedio();
                k.setIdRemedio(1);
                pedidoBean.setRemedio(k);
            }
            pedidoBean.setQuantidade(Integer.parseInt(txtQuantidade.getText()));
            pedidoBean.setPreco(Float.parseFloat(txtTotal.getText()));
        } else {
            throw new DadosBrancoException("Preencha todos os Dados!");
        }
    }

    private void moveBeanParaTela() {
        txtIDp.setText(String.valueOf(pedidoBean.getIdPedido()));
        txtIDc.setText(String.valueOf(pedidoBean.getCliente().getIdCliente()));
        txtIDr.setText(String.valueOf(pedidoBean.getRemedio().getIdRemedio()));
        txtPreco.setText(String.valueOf(pedidoBean.getRemedio().getPreco()));
        txtQuantidade.setText(String.valueOf(pedidoBean.getQuantidade()));
        txtTotal.setText(String.valueOf(pedidoBean.getPreco()));
    }

    //metodos auxiliares
    private boolean verificaDados() {
        return !(cbCliente.getSelectedIndex() == -1 || cbRemedio.getSelectedIndex() == -1
                || txtQuantidade.getText().isEmpty());
    }

    private void preencherComboCliente() {
        //cria um array a partir de uma coleção de proprietario
        Cliente[] items = null;
        try {
            items = cliDAO.lista("").toArray(new Cliente[0]); //vamos listar todos
        } catch (SQLException ex) {
            erro("Preencimento da Combo: " + ex.getMessage());
        }

        //instanciar a model e já carregar com os dados do Proprietário
        modelC = new DefaultComboBoxModel<>(items);
        //coloca a model dentro da combo
        cbCliente.setModel(modelC);
    }

    private void preencherComboRemedio() {
        //cria um array a partir de uma coleção de proprietario
        Remedio[] items = null;
        try {
            items = remDAO.lista("").toArray(new Remedio[0]); //vamos listar todos
        } catch (SQLException ex) {
            erro("Preencimento da Combo: " + ex.getMessage());
        }

        //instanciar a model e já carregar com os dados do Proprietário
        modelR = new DefaultComboBoxModel<>(items);
        //coloca a model dentro da combo
        cbRemedio.setModel(modelR);
    }

    private void limpaCampos() {
        txtIDc.setText("");
        txtIDr.setText("");
        txtPreco.setText("");
        txtQuantidade.setText("");
        txtTotal.setText("");
        cbCliente.setSelectedIndex(-1);
        cbRemedio.setSelectedIndex(-1);
    }

    private void mensagem(String texto) {
        JOptionPane.showMessageDialog(rootPane,
                texto,
                "Informação ao Usuário",
                JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Mostra uma mensagem de erro na tela
     *
     * @param erro
     */
    private void erro(String erro) {
        JOptionPane.showMessageDialog(rootPane,
                erro,
                "Informação ao Usuário",
                JOptionPane.ERROR_MESSAGE);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PedidoView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JComboBox<Cliente> cbCliente;
    private javax.swing.JComboBox<Remedio> cbRemedio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblIDc;
    private javax.swing.JLabel lblIDp;
    private javax.swing.JLabel lblIDr;
    private javax.swing.JLabel lblPreco;
    private javax.swing.JLabel lblQuantidade;
    private javax.swing.JLabel lblRemedio;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTextField txtIDc;
    private javax.swing.JTextField txtIDp;
    private javax.swing.JTextField txtIDr;
    private javax.swing.JTextField txtPreco;
    private javax.swing.JTextField txtQuantidade;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
